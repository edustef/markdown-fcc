{"version":3,"sources":["components/Button.js","Editor.js","Preview.js","App.js","index.js"],"names":["Button","props","id","onClick","handleToggle","Editor","updateEditor","event","handleChange","target","value","className","this","rawContent","onChange","placeholder","Component","Preview","dangerouslySetInnerHTML","__html","renderedContent","App","setState","domPurify","sanitize","marked","editor","state","updateMobileState","isMobile","window","innerWidth","setOptions","gfm","breaks","dummyData","addEventListener","removeEventListener","ReactDOM","render","document","getElementById"],"mappings":"0TAEe,SAASA,EAAOC,GAC7B,OACE,yBAAKC,GAAG,cACN,4BAAQA,GAAG,gBAAgBC,QAASF,EAAMG,cAA1C,W,ICDeC,E,2MAkBnBC,aAAe,SAAAC,GACb,EAAKN,MAAMO,aAAaD,EAAME,OAAOC,Q,wEAjBrC,OACE,yBAAKR,GAAG,oBACN,yBAAKS,UAAU,gBACb,sCACA,kBAACX,EAAD,CAAQI,aAAcQ,KAAKX,MAAMG,gBAEnC,8BACEF,GAAG,SACHQ,MAAOE,KAAKX,MAAMY,WAClBC,SAAUF,KAAKN,aACfS,YAAY,sB,GAZcC,aCAfC,E,iLAEjB,OACE,yBAAKf,GAAG,qBACN,yBAAKS,UAAU,gBACb,uCACA,kBAACX,EAAD,CAAQI,aAAcQ,KAAKX,MAAMG,gBAEnC,yBACEF,GAAG,UACHgB,wBAAyB,CAAEC,OAAQP,KAAKX,MAAMmB,wB,GAVnBJ,aCKhBK,G,kBACnB,WAAYpB,GAAQ,IAAD,8BACjB,4CAAMA,KAiHRO,aAAe,SAAAK,GACb,EAAKS,SAAS,CACZT,WAAYA,EACZO,gBAAiBG,IAAUC,SAASC,IAAOZ,OArH5B,EA0HnBT,aAAe,WACb,EAAKkB,SAAS,CACZI,QAAS,EAAKC,MAAMD,UA5HL,EAiInBE,kBAAoB,WAClB,EAAKN,SAAS,CACZO,SAAUC,OAAOC,YAAc,OAjIjC,EAAKJ,MAAQ,CACXd,WAAY,GACZO,gBAAiB,GACjBM,QAAQ,EACRG,UAAU,GANK,E,sEAWjB,OACE,yBAAKlB,UAAU,mBACb,wBAAIT,GAAG,SAAP,oBACA,yBAAKS,UAAU,aACZC,KAAKe,MAAMD,SAAWd,KAAKe,MAAME,SAChC,kBAAC,EAAD,CACErB,aAAcI,KAAKJ,aACnBJ,aAAcQ,KAAKR,aACnBS,WAAYD,KAAKe,MAAMd,aAEvB,KACFD,KAAKe,MAAMD,QAAWd,KAAKe,MAAME,SAM/B,KALF,kBAAC,EAAD,CACErB,aAAcI,KAAKJ,aACnBY,gBAAiBR,KAAKe,MAAMP,gBAC5BhB,aAAcQ,KAAKR,mB,0CAU7BqB,IAAOO,WAAW,CAChBC,KAAK,EACLC,QAAQ,IAEV,IAAMC,EACJ,sbA2DFvB,KAAKU,SAAS,CACZT,WAAYsB,IAEdL,OAAOM,iBAAiB,SAAUxB,KAAKgB,mBACvChB,KAAKgB,oBACLhB,KAAKJ,aAAa2B,K,6CAKlBL,OAAOO,oBAAoB,SAAUzB,KAAKgB,uB,GA/GbZ,cCJjCsB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.947d4639.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function Button(props) {\n  return (\n    <div id=\"btn-toggle\">\n      <button id=\"btn-toggle-pr\" onClick={props.handleToggle}>Toggle</button>\n    </div>\n  );\n}\n","import React, { Component } from \"react\";\n\nimport Button from \"./components/Button\";\n\nexport default class Editor extends Component {\n  render() {\n    return (\n      <div id=\"editor-container\">\n        <div className=\"group-toggle\">\n          <h2>Editor</h2>\n          <Button handleToggle={this.props.handleToggle} />\n        </div>\n        <textarea\n          id=\"editor\"\n          value={this.props.rawContent}\n          onChange={this.updateEditor}\n          placeholder=\"Type here...\"\n        ></textarea>\n      </div>\n    );\n  }\n\n  updateEditor = event => {\n    this.props.handleChange(event.target.value);\n  };\n}\n","import React, { Component } from \"react\";\n\nimport Button from './components/Button';\n\nexport default class Preview extends Component {\n  render() {\n    return (\n      <div id=\"preview-container\">\n        <div className=\"group-toggle\">\n          <h2>Preview</h2>\n          <Button handleToggle={this.props.handleToggle}/>\n        </div>\n        <div\n          id=\"preview\"\n          dangerouslySetInnerHTML={{ __html: this.props.renderedContent }}\n        ></div>\n      </div>\n    );\n  }\n}\n","/* eslint-disable no-useless-concat */\nimport React, { Component } from \"react\";\nimport marked from \"marked\";\nimport domPurify from \"dompurify\";\n\nimport Editor from \"./Editor\";\nimport Preview from \"./Preview\";\nimport \"./App.css\";\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      rawContent: \"\",\n      renderedContent: \"\",\n      editor: true,\n      isMobile: false\n    };\n  }\n\n  render() {\n    return (\n      <div className=\"outer-container\">\n        <h1 id=\"title\">Markdown Preview</h1>\n        <div className=\"container\">\n          {this.state.editor || !this.state.isMobile ? (\n            <Editor\n              handleChange={this.handleChange}\n              handleToggle={this.handleToggle}\n              rawContent={this.state.rawContent}\n            />\n          ) : null}\n          {!this.state.editor || !this.state.isMobile ? (\n            <Preview\n              handleChange={this.handleChange}\n              renderedContent={this.state.renderedContent}\n              handleToggle={this.handleToggle}\n            />\n          ) : null}\n        </div>\n      </div>\n    );\n  }\n\n  // Adds listener for resizing to determine if it is mobile or not\n  componentDidMount() {\n    marked.setOptions({\n      gfm: true,\n      breaks: true\n    });\n    const dummyData =\n      \"# This is heading 1\" +\n      \"\\n\" +\n      \"## This is heading 2\" +\n      \"\\n\" +\n      \"\" +\n      \"\\n\" +\n      \"This is *italic* this is **bold** \" +\n      \"\\n\" +\n      \"\" +\n      \"\\n\" +\n      \"[GitHub](https://www.github.com)\" +\n      \"\\n\" +\n      \"\" +\n      \"\\n\" +\n      \"`<p>This is inline code</p>`\" +\n      \"\\n\" +\n      \"```javascript\" +\n      \"\\n\" +\n      \"for(let i = 0; i < 3; i++) {\" +\n      \"\\n\" +\n      'console.log(\"This is a code block\");' +\n      \"\\n\" +\n      \"}\" +\n      \"\\n\" +\n      \"```\" +\n      \"\\n\" +\n      \"\" +\n      \"\\n\" +\n      \"Ordered list \" +\n      \"\\n\" +\n      \"\" +\n      \"\\n\" +\n      \"1.item 1\" +\n      \"\\n\" +\n      \"1. item 2\" +\n      \"\\n\" +\n      \"3. item 3\" +\n      \"\\n\" +\n      \"0. item 4\" +\n      \"\\n\" +\n      \"\" +\n      \"\\n\" +\n      \"or unordered\" +\n      \"\\n\" +\n      \"\" +\n      \"\\n\" +\n      \"- item 1\" +\n      \"\\n\" +\n      \"- item 2\" +\n      \"\\n\" +\n      \"- item 3\" +\n      \"\\n\" +\n      \"\" +\n      \"\\n\" +\n      \"> This is a blockquote\" +\n      \"\\n\" +\n      \"\" +\n      \"\\n\" +\n      \"![Alternative text here](https://via.placeholder.com/150)\";\n    this.setState({\n      rawContent: dummyData\n    });\n    window.addEventListener(\"resize\", this.updateMobileState);\n    this.updateMobileState();\n    this.handleChange(dummyData);\n  }\n\n  // Removes the listener at unmounting\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.updateMobileState);\n  }\n\n  // Converts the editor's raw text into html based on markdown syntax\n  handleChange = rawContent => {\n    this.setState({\n      rawContent: rawContent,\n      renderedContent: domPurify.sanitize(marked(rawContent))\n    });\n  };\n\n  // This only works if isMobile is true\n  handleToggle = () => {\n    this.setState({\n      editor: !this.state.editor\n    });\n  };\n\n  // Check if isMobile is true\n  updateMobileState = () => {\n    this.setState({\n      isMobile: window.innerWidth <= 720 ? true : false\n    });\n  };\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}