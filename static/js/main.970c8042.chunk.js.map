{"version":3,"sources":["components/ToggleButton.js","Editor.js","Preview.js","App.js","index.js"],"names":["Button","props","id","onClick","handleToggle","Editor","className","saveFile","rawContent","src","process","alt","this","value","onChange","event","handleChange","target","placeholder","onMouseOver","isMobile","handleIsEditor","onScroll","handleScroll","Component","Preview","renderedContent","dangerouslySetInnerHTML","__html","App","setState","domPurify","sanitize","marked","populateStorage","isEditor","getCurrentScrollPercent","toggleEditor","setScrollPosition","state","panel","document","querySelector","scrollPercent","scrollTop","scrollHeight","offsetHeight","updateIsMobileState","window","innerWidth","localStorage","setItem","setRawContent","getItem","content","name","blob","Blob","type","saveAs","setOptions","gfm","breaks","addEventListener","removeEventListener","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.970c8042.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function Button(props) {\r\n  return (\r\n    <div id=\"btn-toggle\">\r\n      <button id=\"btn-toggle-pr\" onClick={props.handleToggle}>Toggle</button>\r\n    </div>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nimport Button from \"./components/ToggleButton\";\r\n\r\nexport default class Editor extends Component {\r\n  render() {\r\n    return (\r\n      <div id=\"editor-container\">\r\n        <div className=\"group-toggle\">\r\n          <h2>Editor</h2>\r\n          <div>\r\n            <button className=\"dl-btn\" onClick={() => this.props.saveFile(this.props.rawContent, \"rawContent.md\")}>\r\n              <img\r\n                src={process.env.PUBLIC_URL + \"/icons/download-solid.svg\"}\r\n                alt=\"Download \"\r\n              />{\" \"}\r\n              markdown\r\n            </button>\r\n          </div>\r\n          <Button handleToggle={this.props.handleToggle} />\r\n        </div>\r\n        <textarea\r\n          id=\"editor\"\r\n          value={this.props.rawContent}\r\n          onChange={event => {\r\n            this.props.handleChange(event.target.value);\r\n          }}\r\n          placeholder=\"Write here anything you want...\"\r\n          onMouseOver={\r\n            !this.props.isMobile ? () => this.props.handleIsEditor(true) : null\r\n          }\r\n          onScroll={!this.props.isMobile ? this.props.handleScroll : null}\r\n        ></textarea>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nimport Button from \"./components/ToggleButton\";\r\n\r\nexport default class Preview extends Component {\r\n  render() {\r\n    return (\r\n      <div id=\"preview-container\">\r\n        <div className=\"group-toggle\">\r\n          <h2>Preview</h2>\r\n          <div>\r\n            <button\r\n              className=\"dl-btn\"\r\n              onClick={() =>\r\n                this.props.saveFile(\r\n                  this.props.renderedContent,\r\n                  \"renderedContent.html\"\r\n                )\r\n              }\r\n            >\r\n              <img\r\n                src={process.env.PUBLIC_URL + \"/icons/download-solid.svg\"}\r\n                alt=\"Download \"\r\n              />{\" \"}\r\n              HTML\r\n            </button>\r\n          </div>\r\n          <Button handleToggle={this.props.handleToggle} />\r\n        </div>\r\n        <div\r\n          id=\"preview\"\r\n          dangerouslySetInnerHTML={{ __html: this.props.renderedContent }}\r\n          onMouseOver={\r\n            !this.props.isMobile ? () => this.props.handleIsEditor(false) : null\r\n          }\r\n          onScroll={!this.props.isMobile ? this.props.handleScroll : null}\r\n        ></div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","/* eslint-disable no-useless-concat */\r\nimport React, { Component } from \"react\";\r\nimport marked from \"marked\";\r\nimport domPurify from \"dompurify\";\r\nimport { saveAs } from \"file-saver\";\r\n\r\nimport Editor from \"./Editor\";\r\nimport Preview from \"./Preview\";\r\nimport \"./App.css\";\r\n// import BarLoader from '@bit/davidhu2000.react-spinners.bar-loader';\r\n\r\nexport default class App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      rawContent: \"\",\r\n      renderedContent: \"\",\r\n      isEditor: true,\r\n      isMobile: false,\r\n      scrollPercent: 0\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"outer-container\">\r\n        <h1 id=\"title\">Markdown Preview</h1>\r\n        <div className=\"container\">\r\n          {!this.state.isMobile || this.state.isEditor ? (\r\n            <Editor\r\n              isMobile={this.state.isMobile}\r\n              handleChange={this.handleChange}\r\n              handleToggle={this.handleToggle}\r\n              handleScroll={this.handleScroll}\r\n              handleIsEditor={this.handleIsEditor}\r\n              rawContent={this.state.rawContent}\r\n              saveFile={this.saveFile}\r\n            />\r\n          ) : null}\r\n          {!this.state.isMobile || !this.state.isEditor ? (\r\n            <Preview\r\n              isMobile={this.state.isMobile}\r\n              handleChange={this.handleChange}\r\n              renderedContent={this.state.renderedContent}\r\n              handleToggle={this.handleToggle}\r\n              handleScroll={this.handleScroll}\r\n              handleIsEditor={this.handleIsEditor}\r\n              saveFile={this.saveFile}\r\n            />\r\n          ) : null}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Adds listener for resizing to determine if it is mobile or not\r\n  componentDidMount() {\r\n    marked.setOptions({\r\n      gfm: true,\r\n      breaks: true\r\n    });\r\n\r\n    window.addEventListener(\"resize\", this.updateIsMobileState);\r\n    this.updateIsMobileState();\r\n\r\n    if (!localStorage.getItem(\"rawContent\")) {\r\n      this.populateStorage();\r\n    } else {\r\n      this.setRawContent();\r\n    }\r\n  }\r\n\r\n  // Removes the listener at unmounting\r\n  componentWillUnmount() {\r\n    window.removeEventListener(\"resize\", this.updateIsMobileState);\r\n  }\r\n\r\n  // Converts the editor's raw text into html\r\n  handleChange = rawContent => {\r\n    this.setState(\r\n      {\r\n        rawContent: rawContent,\r\n        renderedContent: domPurify.sanitize(marked(rawContent))\r\n      },\r\n      this.populateStorage\r\n    );\r\n  };\r\n\r\n  handleIsEditor = isEditor => {\r\n    this.setState({\r\n      isEditor: isEditor\r\n    });\r\n  };\r\n\r\n  handleToggle = () => {\r\n    this.setState(this.getCurrentScrollPercent);\r\n    this.setState(this.toggleEditor, () =>\r\n      this.setScrollPosition(this.state.isEditor)\r\n    );\r\n  };\r\n\r\n  handleScroll = () => {\r\n    this.setState(\r\n      this.getCurrentScrollPercent,\r\n      this.setScrollPosition(!this.state.isEditor)\r\n    );\r\n  };\r\n\r\n  toggleEditor = state => {\r\n    return {\r\n      isEditor: !state.isEditor\r\n    };\r\n  };\r\n\r\n  getCurrentScrollPercent = state => {\r\n    let panel = document.querySelector(state.isEditor ? \"#editor\" : \"#preview\");\r\n\r\n    return {\r\n      scrollPercent: panel.scrollTop / (panel.scrollHeight - panel.offsetHeight)\r\n    };\r\n  };\r\n\r\n  setScrollPosition = isEditor => {\r\n    let panel = document.querySelector(isEditor ? \"#editor\" : \"#preview\");\r\n\r\n    panel.scrollTop =\r\n      (panel.scrollHeight - panel.offsetHeight) * this.state.scrollPercent;\r\n  };\r\n\r\n  updateIsMobileState = () => {\r\n    this.setState({\r\n      isMobile: window.innerWidth <= 720 ? true : false\r\n    });\r\n  };\r\n\r\n  populateStorage = () => {\r\n    localStorage.setItem(\"rawContent\", this.state.rawContent);\r\n  };\r\n\r\n  setRawContent = () => {\r\n    this.handleChange(localStorage.getItem(\"rawContent\"));\r\n  };\r\n\r\n  saveFile = (content, name) => {\r\n    let blob = new Blob([content], {\r\n      type: \"text/plain;charset=utf-8\"\r\n    });\r\n    saveAs(blob, name);\r\n  };\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}